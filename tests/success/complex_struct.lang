type Foo = struct {
    a: i16;
    b: i32;
};

type Bar = struct {
    a: Foo;
    b: Foo;
};

fn add_foo(let a: Foo, let b: Foo): Foo {
    // TODO: Allow `return Foo{a.a + b.a, a.b + b.b};`.
    var ret: Foo;
    ret.a = a.a + b.a;
    ret.b = a.b + b.b;
    return ret;
}

fn main(): i32 {
    // TODO: Type inference here.
    let foo: Foo = Foo{1, 2};
    var bar: Bar;
    bar.a = foo;
    bar.b = Foo{3, 4};
    let added: Foo = add_foo(bar.a, bar.b);
    return added.a * added.b;
}
