import "std/syscall.kd";

type File = struct {
    fd: i32;
};

type MemoryMap = struct {
    ptr: *mut u8;
    len: u64;
};

fn File::open_write(let path: *u8): File {
    // 65 = `O_WRONLY | O_CREAT`.
    // 438 dec = 666 octal.
    let fd = sys_open(path, 65, 438);
    return File{fd};
}

fn File::open_read(let path: *u8): File {
    // 0 = `O_RDONLY`.
    let fd = sys_open(path, 0, 0);
    return File{fd};
}

fn File::create_map(*this): MemoryMap {
    // 0 = `SEEK_SET`.
    // 2 = `SEEK_END`.
    let len = sys_lseek(this->fd, 0, 2);
    sys_lseek(this->fd, 0, 0);
    // 1 = `PROT_READ`.
    // 2 = `MAP_PRIVATE`.
    let addr = sys_mmap(0, len, 1, 2, this->fd, 0);
    return MemoryMap{addr, len};
}

fn File::write(*this, let str: *u8, let len: u64) {
    sys_write(this->fd, str, len);
}

fn File::close(*this) {
    sys_close(this->fd);
}

fn MemoryMap::destroy(*this) {
    sys_munmap(this->ptr, this->len);
}
