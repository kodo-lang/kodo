import "std/syscall.kd";

const MAP_PRIVATE = 2;
const O_CREAT = 64;
const O_RDONLY = 0;
const O_WRONLY = 1;
const PROT_READ = 1;
const SEEK_SET = 0;
const SEEK_END = 2;

type File = struct {
    fd: i32;
};

type MemoryMap = struct {
    ptr: *mut u8;
    len: u64;
};

fn File::open_write(let path: *u8): File {
    // 438 dec = 666 octal.
    let fd = sys_open(path, O_WRONLY + O_CREAT, 438);
    return File{fd};
}

fn File::open_read(let path: *u8): File {
    let fd = sys_open(path, O_RDONLY, 0);
    return File{fd};
}

fn File::create_map(*this): MemoryMap {
    let len = sys_lseek(this->fd, SEEK_SET, SEEK_END);
    sys_lseek(this->fd, SEEK_SET, 0);
    let addr = sys_mmap(0, len, PROT_READ, MAP_PRIVATE, this->fd, 0);
    return MemoryMap{addr, len};
}

fn File::write(*this, let str: *u8, let len: u64) {
    sys_write(this->fd, str, len);
}

fn File::close(*this) {
    sys_close(this->fd);
}

fn MemoryMap::destroy(*this) {
    sys_munmap(this->ptr, this->len);
}
